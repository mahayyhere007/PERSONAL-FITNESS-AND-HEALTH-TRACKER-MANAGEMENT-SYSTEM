#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Class to represent a fitness plan proposal
class Proposal {
private:
    int id;
    string proposerName;
    string planName;
    string description;
    string status; // Pending, Approved, Rejected

public:
    // Constructor
    Proposal(int id, const string& proposerName, const string& planName, const string& description)
        : id(id), proposerName(proposerName), planName(planName), description(description), status("Pending") {}

    // Display proposal details
    void display() const {
        cout << "ID: " << id << "\n"
             << "Proposer: " << proposerName << "\n"
             << "Plan Name: " << planName << "\n"
             << "Description: " << description << "\n"
             << "Status: " << status << "\n"
             << "-------------------------\n";
    }

    // Getters and setters
    int getId() const { return id; }
    const string& getStatus() const { return status; }

    void updateStatus(const string& newStatus) {
        if (newStatus == "Approved" || newStatus == "Rejected") {
            status = newStatus;
        } else {
            cout << "Invalid status. Status remains unchanged.\n";
        }
    }
};

// Class to represent a daily fitness log
class FitnessLog {
private:
    string date;
    int caloriesBurned;
    int stepsTaken;
    float hoursSlept;
    int waterIntake; // in milliliters

public:
    // Constructor
    FitnessLog(const string& date, int caloriesBurned, int stepsTaken, float hoursSlept, int waterIntake)
        : date(date), caloriesBurned(caloriesBurned), stepsTaken(stepsTaken), hoursSlept(hoursSlept), waterIntake(waterIntake) {}

    // Display log details
    void display() const {
        cout << "Date: " << date << "\n"
             << "Calories Burned: " << caloriesBurned << " cal\n"
             << "Steps Taken: " << stepsTaken << "\n"
             << "Hours Slept: " << hoursSlept << " hrs\n"
             << "Water Intake: " << waterIntake << " ml\n"
             << "-------------------------\n";
    }

    // Getters for generating summary
    int getCaloriesBurned() const { return caloriesBurned; }
    int getStepsTaken() const { return stepsTaken; }
    float getHoursSlept() const { return hoursSlept; }
    int getWaterIntake() const { return waterIntake; }
};

// Global variables
vector<Proposal> proposals;
vector<FitnessLog> fitnessLogs;
int nextProposalId = 1;

// Function to submit a proposal
void submitProposal() {
    string proposerName, planName, description;
    cout << "Enter your name: ";
    cin.ignore();
    getline(cin, proposerName);
    cout << "Enter fitness plan name: ";
    getline(cin, planName);
    cout << "Enter description of the plan: ";
    getline(cin, description);

    Proposal proposal(nextProposalId++, proposerName, planName, description);
    proposals.push_back(proposal);
    cout << "Proposal submitted successfully! Your proposal ID is: " << nextProposalId - 1 << "\n";
}

// Function to view all proposals
void viewProposals() {
    if (proposals.empty()) {
        cout << "No proposals available.\n";
        return;
    }

    cout << "\n--- List of Proposals ---\n";
    for (const auto& proposal : proposals) {
        proposal.display();
    }
}

// Function to update the status of a proposal
void updateProposalStatus() {
    if (proposals.empty()) {
        cout << "No proposals available to update.\n";
        return;
    }

    int id;
    cout << "Enter proposal ID to update: ";
    cin >> id;

    for (auto& proposal : proposals) {
        if (proposal.getId() == id) {
            string newStatus;
            cout << "Proposal found:\n";
            proposal.display();
            cout << "Enter new status (Approved/Rejected): ";
            cin >> ws; // Clear input buffer
            getline(cin, newStatus);
            proposal.updateStatus(newStatus);
            cout << "Proposal status updated successfully.\n";
            return;
        }
    }

    cout << "Proposal with ID " << id << " not found.\n";
}

// Function to delete a proposal
void deleteProposal() {
    if (proposals.empty()) {
        cout << "No proposals available to delete.\n";
        return;
    }

    int id;
    cout << "Enter proposal ID to delete: ";
    cin >> id;

    for (auto it = proposals.begin(); it != proposals.end(); ++it) {
        if (it->getId() == id) {
            proposals.erase(it);
            cout << "Proposal with ID " << id << " deleted successfully.\n";
            return;
        }
    }

    cout << "Proposal with ID " << id << " not found.\n";
}

// Function to log daily fitness data
void logFitnessData() {
    string date;
    int caloriesBurned, stepsTaken, waterIntake;
    float hoursSlept;

    cout << "Enter date (YYYY-MM-DD): ";
    cin >> date;
    cout << "Enter calories burned: ";
    cin >> caloriesBurned;
    cout << "Enter steps taken: ";
    cin >> stepsTaken;
    cout << "Enter hours slept: ";
    cin >> hoursSlept;
    cout << "Enter water intake (in milliliters): ";
    cin >> waterIntake;

    FitnessLog log(date, caloriesBurned, stepsTaken, hoursSlept, waterIntake);
    fitnessLogs.push_back(log);
    cout << "Fitness data logged successfully for " << date << ".\n";
}

// Function to view fitness logs
void viewFitnessLogs() {
    if (fitnessLogs.empty()) {
        cout << "No fitness logs available.\n";
        return;
    }

    cout << "\n--- Fitness Logs ---\n";
    for (const auto& log : fitnessLogs) {
        log.display();
    }
}

// Function to generate a summary report
void generateSummaryReport() {
    if (fitnessLogs.empty()) {
        cout << "No fitness logs available to generate a report.\n";
        return;
    }

    int totalCalories = 0, totalSteps = 0, totalWater = 0;
    float totalSleep = 0.0;

    for (const auto& log : fitnessLogs) {
        totalCalories += log.getCaloriesBurned();
        totalSteps += log.getStepsTaken();
        totalSleep += log.getHoursSlept();
        totalWater += log.getWaterIntake();
    }

    cout << "\n--- Summary Report ---\n";
    cout << "Total Calories Burned: " << totalCalories << " cal\n";
    cout << "Total Steps Taken: " << totalSteps << "\n";
    cout << "Total Water Intake: " << totalWater << " ml\n";
    cout << "Total Hours Slept: " << totalSleep << " hrs\n";
    cout << "-----------------------\n";
}

// Main menu
void menu() {
    while (true) {
        cout << "\n--- Personal Fitness and Health Tracker Management System ---\n";
        cout << "1. Submit a Proposal\n";
        cout << "2. View Proposals\n";
        cout << "3. Update Proposal Status\n";
        cout << "4. Delete a Proposal\n";
        cout << "5. Log Fitness Data\n";
        cout << "6. View Fitness Logs\n";
        cout << "7. Generate Summary Report\n";
        cout << "8. Exit\n";
        cout << "Enter your choice (1-8): ";

        int choice;
        cin >> choice;

        switch (choice) {
            case 1:
                submitProposal();
                break;
            case 2:
                viewProposals();
                break;
            case 3:
                updateProposalStatus();
                break;
            case 4:
                deleteProposal();
                break;
            case 5:
                logFitnessData();
                break;
            case 6:
                viewFitnessLogs();
                break;
            case 7:
                generateSummaryReport();
                break;
            case 8:
                cout << "Exiting the system. Goodbye!\n";
                return;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }
}

// Main function
int main() {
    menu();
    return 0;
}

